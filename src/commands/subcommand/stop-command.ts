import { UserManager } from "../../manager/user-manager";
import { CommandData, ReplyMessageFunction, SubCommand } from "../sub-command";

export class StopCommand extends SubCommand {
  public getCommandName(): string {
    return "stop";
  }

  public getCommandLabels(): string[] {
    return ["parar"];
  }

  public getDescription(): string {
    return "Pare de receber o cardÃ¡pio diario";
  }

  public async execute(
    reply: ReplyMessageFunction,
    args: string[],
    data: CommandData
  ): Promise<any> {
    const { remoteJid, chatPrivate } = data;

    if (!chatPrivate) {
      return await reply({
        text: "Esse comando sÃ³ pode ser executado em uma conversa privada! ğŸ˜…",
      });
    }

    if (!UserManager.canReceiveNotificationInPrivateChat()) {
      return await reply({
        text: "Esse comando nÃ£o estÃ¡ disponÃ­vel no momento! ğŸ˜¢",
      });
    }

    if (await UserManager.canReceiveNotification(remoteJid)) {
      if (await UserManager.removeReceiveNotification(remoteJid)) {
        return await reply({
          text: "Agora vocÃª nÃ£o estÃ¡ recebendo o cardÃ¡pio diÃ¡rio! ğŸ˜¢",
        });
      } else {
        return await reply({
          text: "Erro ao remover vocÃª da lista de notificaÃ§Ãµes! ğŸ˜¢",
        });
      }
    } else {
      return await reply({
        text: "VocÃª nÃ£o estÃ¡ recebendo o cardÃ¡pio diÃ¡rio! ğŸ˜…",
      });
    }
  }
}
