/**
 * EmojiParser
 *
 * Esta classe √© respons√°vel por armazenar os emojis utilizados no card√°pio
 * Observa√ß√£o: as categorias s√£o fixas e n√£o podem ser alteradas.
 *
 * A estrutura da classe pode ser completamente alterada, desde que a fun√ß√£o
 * find seja mantida.
 *
 * @class EmojiParser
 */

import {
  MENU_TYPE_ACOMPANHAMENTO,
  MENU_TYPE_GUARNICAO,
  MENU_TYPE_PRINCIPAL,
  MENU_TYPE_SALADA,
  MENU_TYPE_SOBREMSA,
  MENU_TYPE_SUCO,
  MENU_TYPE_VEGETARIANO,
  MenuCategory,
} from "./menu-parser";

type EMOJI_MAP = {
  [key in MenuCategory]: string | string[];
};

export class EmojiParser {
  public emojis: EMOJI_MAP = {
    [MENU_TYPE_PRINCIPAL]: ["üçõ", "üç≤"],
    [MENU_TYPE_VEGETARIANO]: "üå±",
    [MENU_TYPE_ACOMPANHAMENTO]: ["üçö", "üçö", "ü´ò"],
    [MENU_TYPE_SALADA]: "ü•ó",
    [MENU_TYPE_GUARNICAO]: "üçü",
    [MENU_TYPE_SOBREMSA]: ["üçé", "üç¨"],
    [MENU_TYPE_SUCO]: "üçπ",
  };

  /**
   * Retorna o emoji correspondente ao item
   *
   * @param item Item, exemplo: "Banana", "Cuscuz"...
   * @param category Categoria do item, exemplo: SOBREMESSA, GUARNI√á√ÉO...
   * @param index √çndice do item na lista
   *
   * Exemplo de estrutura:
   *
   * SOBREMESSA:
   *   0: Banana {emoji}
   *   1: Doce {emoji}
   *
   * GUARNI√á√ÉO:
   *   0: Cuscuz {emoji}
   *
   * find("Banana", MENU_TYPE_SOBREMSA, 0) => {emoji}
   *
   * @returns Emoji correspondente ou uma string vazia se o emoji n√£o for encontrado.
   */
  public find(item: string, category: MenuCategory, index: number): string {
    /** Nesse c√≥digo puxar categoria do item, e pegar o emoji com base no indice */
    const emojiCategory = this.emojis[category] ?? [];

    const emojiList = Array.isArray(emojiCategory)
      ? emojiCategory
      : [emojiCategory];

    return emojiList[index] ?? "";
  }
}
